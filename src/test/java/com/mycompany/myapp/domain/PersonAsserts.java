package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllPropertiesEquals(Person expected, Person actual) {
        assertPersonAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllUpdatablePropertiesEquals(Person expected, Person actual) {
        assertPersonUpdatableFieldsEquals(expected, actual);
        assertPersonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAutoGeneratedPropertiesEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableFieldsEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person relevant properties")
            .satisfies(e -> assertThat(e.getNameAndFirstName()).as("check nameAndFirstName").isEqualTo(actual.getNameAndFirstName()))
            .satisfies(e -> assertThat(e.getLastEvent()).as("check lastEvent").isEqualTo(actual.getLastEvent()))
            .satisfies(e -> assertThat(e.getLastEventDate()).as("check lastEventDate").isEqualTo(actual.getLastEventDate()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getEventCount()).as("check eventCount").isEqualTo(actual.getEventCount()))
            .satisfies(e -> assertThat(e.getTicketCount()).as("check ticketCount").isEqualTo(actual.getTicketCount()))
            .satisfies(e -> assertThat(e.getFirstEventDate()).as("check firstEventDate").isEqualTo(actual.getFirstEventDate()))
            .satisfies(e -> assertThat(e.getSoldForTheAmount()).as("check soldForTheAmount").isEqualTo(actual.getSoldForTheAmount()))
            .satisfies(e -> assertThat(e.getAllEvents()).as("check allEvents").isEqualTo(actual.getAllEvents()))
            .satisfies(e -> assertThat(e.getMailings()).as("check mailings").isEqualTo(actual.getMailings()))
            .satisfies(e -> assertThat(e.getRegionResidence()).as("check regionResidence").isEqualTo(actual.getRegionResidence()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableRelationshipsEquals(Person expected, Person actual) {}
}
